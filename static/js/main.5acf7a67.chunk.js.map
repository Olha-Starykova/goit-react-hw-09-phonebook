{"version":3,"sources":["redux/contacts/contacts-actions.js","components/Navigation.js","components/default-avatar.png","components/UserMenu.js","components/AuthNav.js","components/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","styles","link","display","textDecoration","padding","fontWeight","color","activeLink","Navigation","isLoggedIn","useSelector","authSelectors","getIsAuthenticated","to","exact","style","activeStyle","container","alignItems","avatar","marginRight","name","UserMenu","getUsername","dispatch","useDispatch","onLogout","useCallback","authOperations","logOut","src","defaultAvatar","alt","width","type","onClick","AuthNav","header","justifyContent","borderBottom","AppBar","isLoggeIn","PrivateRoute","isAuthenticated","redirectTo","children","routeProps","PublicRoute","restricted","HomeView","lazy","RegisterView","LoginView","TodosView","App","useEffect","getCurrentUser","fallback","path","contacts","createReducer","_","payload","state","filter","id","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contactsReduser","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","email","user","authActions","token","setError","error","axios","defaults","baseURL","headers","common","Authorization","register","credentials","a","post","response","data","message","logIn","getState","persistedToken","get"],"mappings":"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","file":"static/js/main.5acf7a67.chunk.js","sourcesContent":["//import types from './contacts-types'\r\n//import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n// const addTodo = createAction('contacts/add', (name, number) => {\r\n//     return {\r\n//         payload: {\r\n//             id: shortid.generate(),\r\n//             name,\r\n//             number, \r\n//         }\r\n//     }\r\n// });\r\n\r\n// const addTodo = (name, number) => ({\r\n//     type: types.ADD,\r\n//     payload: {\r\n//         id: shortid.generate(),\r\n//         name: name,\r\n//         number: number,\r\n//     }\r\n// });\r\n\r\n// export const deleteTodo = createAction('contacts/delete')\r\n\r\n// const deleteTodo = contactId => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId\r\n// })\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter')\r\n\r\n// const changeFilter = value => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value\r\n// })\r\n\r\n// export default {\r\n//     addContactRequest,\r\n//     addContactSuccess,\r\n//     addContactError,\r\n//     deleteTodo,\r\n//     changeFilter\r\n// };","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {authSelectors} from '../redux/auth'\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\n\r\n\r\nexport default function Navigation() {\r\n\r\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n      <nav>\r\n    <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\r\n      Главная\r\n    </NavLink>\r\n\r\n    \r\n{isLoggedIn &&  \r\n\r\n   ( <NavLink\r\n      to=\"/contacts\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Заметки\r\n    </NavLink>)}\r\n  </nav>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n// const mapStateToProps = state => ({\r\n//   isLoggedIn: authSelectors.getIsAuthenticated(state)\r\n// })\r\n\r\n\r\n// export default connect(mapStateToProps)(Navigation);","export default __webpack_public_path__ + \"static/media/default-avatar.e44fc4e2.png\";","import React, {useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n import { authSelectors, authOperations } from '../redux/auth';\r\n import defaultAvatar from './default-avatar.png';\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    marginRight: 4,\r\n  },\r\n  name: {\r\n    fontWeight: 700,\r\n    marginRight: 12,\r\n  },\r\n};\r\n\r\n\r\nexport default function UserMenu() {\r\n\r\n  const name = useSelector(authSelectors.getUsername)\r\n  const dispatch = useDispatch();\r\n\r\n  const onLogout = useCallback(() => {\r\n    dispatch(authOperations.logOut());\r\n  }, [dispatch]);\r\n  \r\n  return (\r\n  <div style={styles.container}>\r\n    <img src={defaultAvatar} alt=\"\" width=\"32\" style={styles.avatar} />\r\n    <span style={styles.name}>Welcome, {name}</span>\r\n    <button type=\"button\" onClick={onLogout}>\r\n      Выйти\r\n    </button>\r\n  </div>\r\n  );\r\n};\r\n\r\n\r\n// const mapStateToProps = state => ({\r\n//   name: authSelectors.getUsername(state),\r\n//    avatar: defaultAvatar,\r\n// });\r\n\r\n// const mapDispatchToProps = {\r\n//   onLogout: authOperations.logOut,\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(UserMenu);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink\r\n      to=\"/register\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Регистрация\r\n    </NavLink>\r\n    <NavLink\r\n      to=\"/login\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Логин\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Navigation from './Navigation';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\n import { authSelectors } from '../redux/auth';\r\n\r\nconst styles = {\r\n  header: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    borderBottom: '1px solid #2A363B',\r\n  },\r\n};\r\n\r\nexport default function AppBar() {\r\n  \r\nconst isLoggeIn = useSelector(authSelectors.getIsAuthenticated)\r\n\r\n return (\r\n    <header style={styles.header}>\r\n      <Navigation />\r\n      {isLoggeIn ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n  );\r\n};\r\n\r\n\r\n// useSelector\r\n\r\n// const mapStateToProps = state => ({\r\n//   isLoggeIn: authSelectors.getIsAuthenticated(state),\r\n// });\r\n\r\n// export default connect(mapStateToProps)(AppBar);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\nexport default function PrivateRoute ({\r\n   isAuthenticated,\r\n  redirectTo,\r\n   children,\r\n  ...routeProps\r\n}) {\r\n\r\n  const isLoggeIn = useSelector(authSelectors.getIsAuthenticated)\r\n\r\n  return (\r\n    <Route {...routeProps}>\r\n      {isLoggeIn ? (children) : <Redirect to={redirectTo} />}\r\n    </Route>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = state => ({\r\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n// });\r\n\r\n// export default connect(mapStateToProps)(PrivateRoute);\r\n\r\n  // render={props =>\r\n  //       isLoggeIn ? <Component {...props} /> : <Redirect to={redirectTo} />","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n\r\n  isAuthenticated,\r\n  redirectTo,\r\n  children,\r\n  ...routeProps\r\n}) => {\r\n  const isLoggeIn = useSelector(authSelectors.getIsAuthenticated)\r\n  return <Route {...routeProps}>\r\n    {isLoggeIn && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) :( children)}\r\n  </Route>\r\n};\r\n\r\nexport default PublicRoute;\r\n\r\n// const mapStateToProps = state => ({\r\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n// });\r\n\r\n// export default connect(mapStateToProps)(PublicRoute);\r\n\r\n    // render={props =>\r\n    //   isAuthenticated && routeProps.restricted ? (\r\n    //     <Redirect to={redirectTo} />\r\n    //   ) : (\r\n    //     <Component {...props} />\r\n    //   )\r\n    // }","import React, {  Suspense, lazy, useEffect } from 'react';\nimport {useDispatch } from 'react-redux';\n //import HomeView from './views/HomeView'\n //import RegisterView from './views/RegisterView'\n//import LoginView from './views/LoginView'\n //import TodosView from './views/TodosView'\nimport { Switch } from 'react-router-dom';\nimport AppBar from './components/AppBar';\nimport { authOperations } from './redux/auth';\nimport PrivateRoute from './components/PrivateRoute'\nimport PublicRoute from './components/PublicRoute'\n\nconst HomeView = lazy(() => import('./views/HomeView'));\nconst RegisterView = lazy(() => import('./views/RegisterView'));\nconst LoginView = lazy(() => import('./views/LoginView'));\nconst TodosView = lazy(() => import('./views/TodosView'));\n\n\nexport default function  App () {\n \n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(authOperations.getCurrentUser())\n  }, [dispatch]);\n  \n  return (\n    <div>\n      <AppBar />\n        \n      <Suspense fallback={<p>Загружаем...</p>}>\n        <Switch>\n          <PublicRoute exact path=\"/\">\n            <HomeView />\n          </PublicRoute>\n            \n          <PublicRoute\n            path=\"/register\"\n            restricted\n            redirectTo=\"/contacts\" >\n            < RegisterView />\n          </PublicRoute>\n              \n          <PublicRoute\n            path=\"/login\"\n            restricted\n            redirectTo=\"/contacts\" >\n            <LoginView />\n          </PublicRoute>\n            \n          <PrivateRoute\n            path=\"/contacts\"\n            redirectTo=\"/login\">\n            <TodosView />\n          </PrivateRoute>\n        </Switch>\n      </Suspense>\n    </div>\n  );\n  }\n\n\n\n","import { combineReducers } from \"redux\"\r\n//import types from './contacts-types'\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    changeFilter,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contacts-actions'\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\n\r\n//console.log(actions.addTodo.type)\r\n\r\nconst contacts = createReducer([], {\r\n    [fetchContactSuccess]: (_, { payload }) =>  payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload)\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n \r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload,\r\n}\r\n);\r\n\r\n// const contacts = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [...state, payload]\r\n//         case types.DELETE:\r\n//             return state.filter(({ id }) => id !== payload)\r\n//         default: return state\r\n//     }\r\n// };\r\n\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//         switch (type) {  \r\n//         case types.CHANGE_FILTER:\r\n//             return payload\r\n//               default: return state\r\n//     }\r\n//  }\r\n\r\n\r\n    //описали редьюсер\r\nexport default combineReducers({\r\n    contacts,\r\n    filter,\r\n    loading,\r\n   })","//import { combineReducers } from 'redux';\r\n\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger'\r\nimport { authReducer} from './auth';\r\nimport {\r\n     persistStore, persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' \r\nimport contactsReduser from './contacts/contacts-reducer'\r\n\r\n\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactsReduser,\r\n// });\r\n\r\n//console.log(getDefaultMiddleware())\r\n\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    }\r\n}), logger,];\r\n\r\n// const rootReducer = combineReducers({\r\n//       contacts: persistReducer(persistConfig, contactsReduser) \r\n//     })\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer )\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// const contactspersistConfig = {\r\n//     key: 'contacts',\r\n//     storage,\r\n//     blacklist: ['filter'],\r\n// };\r\n\r\nconst authPersistConfig = {\r\n    key: 'auth',\r\n     storage,\r\n    whitelist: ['token'],\r\n}\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        auth: persistReducer(authPersistConfig, authReducer),\r\n        contacts: contactsReduser,\r\n            // persistReducer(contactspersistConfig, contactsReduser)\r\n    },\r\n    middleware,\r\n})\r\n\r\nconst persistor = persistStore(store)\r\n\r\n export default { store, persistor };\r\n//export default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\n//console.log(store)\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n   [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\n\r\nconst setError = (_, { payload }) => payload;\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\n\r\n\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*\r\n * POST @ /users/signup\r\n * body { name, email, password }\r\n *\r\n * После успешной регистрации добавляем токен в HTTP-заголовок\r\n */\r\n\r\nconst register = credentials =>async dispatch => {\r\n    dispatch(authActions.registerRequest());\r\n    try {\r\n        const response = await axios.post('/users/signup', credentials)\r\n       \r\n        token.set(response.data.token);\r\n        dispatch(authActions.registerSuccess(response.data))\r\n    } catch (error) {\r\n        dispatch(authActions.registerError(error.message))\r\n    }\r\n    \r\n }\r\n\r\n/*\r\n * POST @ /users/login\r\n * body:\r\n *    { email, password } \r\n *\r\n * После успешного логина добавляем токен в HTTP-заголовок\r\n */\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\n//const logIn = credentials =>  dispatch => { };\r\n\r\n\r\n/*\r\n * POST @ /users/logout\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. После успешного логаута, удаляем токен из HTTP-заголовка\r\n */\r\nconst logOut = () => async dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\n\r\n\r\n/*\r\n * GET @ /users/current\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. Забираем токен из стейта через getState()\r\n * 2. Если токена нет, выходим не выполняя никаких операций\r\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\r\n */\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n     dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n     dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\n\r\nexport default { register, logOut, logIn, getCurrentUser };","\r\n const getIsAuthenticated = state => state.auth.isAuthenticated;\r\n\r\nconst getUsername = state => state.auth.user.name;\r\n\r\nexport default {\r\n  getIsAuthenticated,\r\n  getUsername,\r\n};"],"sourceRoot":""}