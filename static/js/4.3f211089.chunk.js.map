{"version":3,"sources":["../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/TodosView.js","../node_modules/shortid/lib/alphabet.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js"],"names":["module","exports","random","alphabet","size","mask","Math","log","length","LN2","step","id","bytes","i","require","RegExp","get","replace","test","dispatch","fetchContactRequest","axios","then","data","fetchContactSuccess","catch","error","fetchContactError","message","name","number","contacts","addContactRequest","post","addContactSuccess","addContactError","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getFilter","state","filter","getAllTodos","getLoading","loading","getVisibleTodos","createSelector","normalizedFilter","toLowerCase","contact","includes","ContactForm","useDispatch","useState","setName","setNumber","useSelector","contactsSelectors","nameInputId","shortid","generate","numberInputId","hendelChangeName","useCallback","e","currentTarget","value","hendelChangeNumber","hendelSubmit","preventDefault","map","alert","contactsOperations","className","onSubmit","htmlFor","type","pattern","title","required","onChange","ContactList","onClick","onDeleteTodo","Filter","contactsActions","target","TodosView","useEffect","isLoading","previousSeed","shuffled","randomFromSeed","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","floor","push","splice","shuffle","characters","seed","lookup","index","_slicedToArray","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","err","unsupportedIterableToArray","TypeError","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","_seed_","counter","previousSeconds","str","seconds","Date","now","format","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","Uint8Array"],"mappings":"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","file":"static/js/4.3f211089.chunk.js","sourcesContent":["// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    // changeFilter,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contacts-actions'\r\n\r\n\r\n\r\nconst fetchTodos = () =>  dispatch => {\r\n    dispatch(fetchContactRequest());\r\n\r\n    // try {\r\n    //     const { data } = await axios.get('/contacts');\r\n    //     dispatch(fetchContactSuccess(data))\r\n    // } catch (error) {\r\n    //     dispatch(fetchContactError(error.message))\r\n    // }\r\n     axios\r\n        .get('/contacts')\r\n        .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n        .catch(error => dispatch(fetchContactError(error.message)));\r\n} \r\n\r\nconst addTodo = (name, number) =>  dispatch => {\r\n    const contacts = { name, number }\r\n    dispatch(addContactRequest())\r\n\r\n    // try {\r\n    //     const { data } = await axios.post('/contacts', contacts)\r\n    //     dispatch(addContactSuccess(data))\r\n    // } catch (error) {\r\n    //     dispatch(addContactError(error.message))\r\n    // }\r\n    axios\r\n        .post('/contacts', contacts)\r\n        .then(({ data }) =>\r\n            dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error.message)));\r\n};\r\n\r\n\r\nconst deleteTodo = contactId =>  dispatch => {\r\n    dispatch(deleteContactRequest())\r\n\r\n      axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error.message)));\r\n\r\n};\r\n    \r\n\r\nexport default {\r\n    fetchTodos,\r\n    addTodo,\r\n    deleteTodo,\r\n}","import {createSelector} from '@reduxjs/toolkit'\r\n\r\nconst getLoading = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getAllTodos = state => state.contacts.contacts\r\n\r\n// const getVisibleTodos = state => {\r\n//     const filter = getFilter(state)\r\n//     const contacts = getAllTodos(state)\r\n//     const normalizedFilter = filter.toLowerCase();\r\n    \r\n//     return contacts.filter(contact =>\r\n//         contact.name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n// };\r\n\r\n//предаем от чего зависит мемонизация для кеширования аргументов\r\nconst getVisibleTodos = createSelector(\r\n    [getAllTodos, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    },\r\n);\r\n\r\nexport default {\r\n    getLoading,\r\n    getFilter,\r\n    getVisibleTodos,\r\n    getAllTodos,\r\n};","import React, { useState, useCallback } from 'react';\r\n  //ставим npm i shortid\r\nimport shortid from 'shortid';\r\nimport './ContactForm.css'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport contactsOperations from '../../redux/contacts/contacts-operations'\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors'\r\n\r\n  \r\n\r\nexport default function ContactForm() {\r\n  const dispatch = useDispatch()\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n    const contacts = useSelector(contactsSelectors.getAllTodos)\r\n\r\n\r\n//   state = {\r\n//     name: '', \r\n//     number: ''\r\n//   };\r\n// //генерим там лежит уникалый индефикатор\r\n  let nameInputId = shortid.generate()\r\n  let numberInputId = shortid.generate();\r\n\r\n  const hendelChangeName = useCallback( e => {\r\n    setName(e.currentTarget.value)\r\n  },[]);\r\n  const hendelChangeNumber = useCallback(e => {\r\n    setNumber(e.currentTarget.value)\r\n  },[]);\r\n   \r\n  const  hendelSubmit = useCallback( e => { \r\n    e.preventDefault();\r\n    \r\n        if (contacts.map(({ name }) => name).includes(name)) {\r\n        alert(`${name} is already in contacts`)\r\n        return\r\n    }\r\n\r\n     dispatch(contactsOperations.addTodo(name, number)) \r\n//this.props.onSubmit( this.state.name, this.state.number)\r\n         \r\n    setName('')\r\n    setNumber('')\r\n  },[dispatch, name, number,contacts])\r\n\r\n//     //общий метод для инпутов патерн для форм по внешнему виду контролируемый елемент\r\n//     hendelChange = e => {\r\n//         const { name, value } = e.target;\r\n//         this.setState({\r\n//             [name]: value,\r\n//         })\r\n//     };\r\n//     //сабмит формы\r\n//     hendelSubmit = e => { \r\n//         e.preventDefault();\r\n//         if (this.props.contacts.map(({ name }) => name).includes(this.state.name)) {\r\n//         alert(`${this.state.name} is already in contacts`)\r\n//         return\r\n//       }\r\n//        this.props.onSubmit( this.state.name, this.state.number)\r\n      \r\n//         this.reset();\r\n//     };\r\n//     //сброс формы очистить стейт\r\n//   reset = () => {\r\n//     this.setState({\r\n//       name: '',\r\n//       number: ''\r\n//     })\r\n//   };\r\n\r\n    \r\n      return (\r\n        <form className='form' onSubmit={hendelSubmit}>\r\n          <label htmlFor={nameInputId}>\r\n            Name <input\r\n              type=\"text\"\r\n              value={name}\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              id={nameInputId}\r\n              onChange={hendelChangeName}\r\n            />\r\n          </label>\r\n          <label htmlFor={numberInputId}>\r\n            Number <input\r\n              type=\"tel\"\r\n              value={number}\r\n              name=\"number\"\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              id={numberInputId}\r\n              onChange={hendelChangeNumber}\r\n              required\r\n            />\r\n          </label>\r\n                            \r\n          <button className=\"button\" type='submit'>Add contacts</button>\r\n      \r\n        </form>\r\n            \r\n      );\r\n  };\r\n\r\n\r\n//    ContactForm.propTypes = {\r\n//   onSubmit: PropTypes.func.isRequired,\r\n// };\r\n\r\n\r\n// const mapStateToProps = state => {\r\n// //  return {contacts: state.contacts.contacts}\r\n//    return {contacts: contactsSelectors.getAllTodos(state) }\r\n//   }\r\n\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onSubmit: (name, number) => dispatch(contactsOperations.addTodo(name, number)) \r\n// })\r\n\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './ContactList.css'\r\nimport { useDispatch, useSelector} from 'react-redux'\r\nimport  contactsOperations from '../../redux/contacts/contacts-operations'\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors'\r\n\r\n\r\nexport default function ContactList() {\r\n\r\n    const dispatch = useDispatch()\r\n    const contacts = useSelector(contactsSelectors.getVisibleTodos)\r\n   const onDeleteTodo = id =>  dispatch(contactsOperations.deleteTodo(id)) \r\n\r\n    \r\n    return (\r\n        <ul className=\"TodoList\">\r\n            {contacts.map(({ id, name, number }) => (\r\n                <li key={id} className=\"TodoList__item\">\r\n                    <p className=\"TodoList__text\">{name}: {number}</p>\r\n                    <button onClick={() => onDeleteTodo(id)}>Delete</button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n  \r\n\r\n\r\n  \r\n// const mapStateToProps = state => ({\r\n//     contacts: contactsSelectors.getVisibleTodos(state)\r\n// })\r\n\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onDeleteTodo: (id) => dispatch(contactsOperations.deleteTodo(id))\r\n// })\r\n\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n  })),\r\n}\r\n\r\n//export default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport './Filter.css'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts/contacts-actions'\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors'\r\n\r\n\r\nexport default function Filter() {\r\n\r\n  const filter = useSelector(contactsSelectors.getFilter)\r\n\r\n  const dispatch = useDispatch();\r\n const onChange = e => dispatch(contactsActions.changeFilter(e.target.value))\r\n\r\n  return(\r\n  <label className=\"label\">\r\n      Find contacts by name\r\n      <input type=\"text\" value={filter} onChange={onChange} />\r\n  </label>\r\n);\r\n} \r\n\r\n// const mapStateToProps = state => ({\r\n//     // filter: state.contacts.filter\r\n//    filter: contactsSelectors.getFilter(state)\r\n// })\r\n\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//     onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value))\r\n// })\r\n\r\n\r\n\r\n// Filter.propTypes = {\r\n//   filter: PropTypes.string.isRequired,\r\n//   onChange: PropTypes.func.isRequired,\r\n// };\r\n\r\n//export default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, {  useEffect } from 'react';\r\n import ContactForm from '../components/ContactForm/ContactForm';\r\n import ContactList from '../components/ContactList/ContactList';\r\n import Filter from '../components/Filter/Filter';\r\n import { useSelector, useDispatch } from 'react-redux';\r\n import contactsOperations from '../redux/contacts/contacts-operations'\r\n import contactsSelectors from '../redux/contacts/contacts-selectors'\r\n\r\n\r\n\r\nexport  default function TodosView () {\r\n  const dispatch = useDispatch();\r\n  // componentDidMount() {\r\n  //   this.props.fetchTodos();\r\n  // }\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchTodos())\r\n\r\n  }, [dispatch])\r\n\r\n const  isLoading =  useSelector(contactsSelectors.getLoading)\r\n  \r\n  \r\n    return (\r\n      <div>\r\n   \r\n        <h1>Phonebook</h1>\r\n        {isLoading && <h1>...Loading</h1>}\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        \r\n         <Filter />\r\n     \r\n        <ContactList /> \r\n\r\n        </div>\r\n  \r\n    );\r\n  }\r\n\r\n\r\n// const mapStateToProps = state => ({\r\n//   isLoading: contactsSelectors.getLoading(state),\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n// fetchTodos: ()=>dispatch(contactsOperations.fetchTodos())\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(TodosView );","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n"],"sourceRoot":""}