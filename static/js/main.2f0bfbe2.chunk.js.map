{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js","components/Navigation.js","components/default-avatar.png","components/UserMenu.js","components/AuthNav.js","components/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","name","email","user","createReducer","authActions","_","payload","token","setError","error","isAuthenticated","combineReducers","axios","defaults","baseURL","headers","common","Authorization","register","credentials","dispatch","a","post","response","data","message","logOut","logIn","getCurrentUser","getState","persistedToken","auth","get","getIsAuthenticated","state","getUsername","styles","link","display","textDecoration","padding","fontWeight","color","activeLink","connect","authSelectors","to","exact","style","activeStyle","container","alignItems","avatar","marginRight","mapDispatchToProps","onLogout","authOperations","defaultAvatar","src","alt","width","type","onClick","AuthNav","header","justifyContent","borderBottom","Component","component","redirectTo","routeProps","render","props","restricted","HomeView","lazy","RegisterView","LoginView","TodosView","App","this","onGetCurretnUser","fallback","path","contacts","filter","id","loading","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contactsReduser","persistor","persistStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f0bfbe2.chunk.js","sourcesContent":["//import types from './contacts-types'\r\n//import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n// const addTodo = createAction('contacts/add', (name, number) => {\r\n//     return {\r\n//         payload: {\r\n//             id: shortid.generate(),\r\n//             name,\r\n//             number, \r\n//         }\r\n//     }\r\n// });\r\n\r\n// const addTodo = (name, number) => ({\r\n//     type: types.ADD,\r\n//     payload: {\r\n//         id: shortid.generate(),\r\n//         name: name,\r\n//         number: number,\r\n//     }\r\n// });\r\n\r\n// export const deleteTodo = createAction('contacts/delete')\r\n\r\n// const deleteTodo = contactId => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId\r\n// })\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter')\r\n\r\n// const changeFilter = value => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value\r\n// })\r\n\r\n// export default {\r\n//     addContactRequest,\r\n//     addContactSuccess,\r\n//     addContactError,\r\n//     deleteTodo,\r\n//     changeFilter\r\n// };","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n   [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\n\r\nconst setError = (_, { payload }) => payload;\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: setError,\r\n  [authActions.loginError]: setError,\r\n  [authActions.logoutError]: setError,\r\n  [authActions.getCurrentUserError]: setError,\r\n});\r\n\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\n\r\n\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*\r\n * POST @ /users/signup\r\n * body { name, email, password }\r\n *\r\n * После успешной регистрации добавляем токен в HTTP-заголовок\r\n */\r\n\r\nconst register = credentials =>async dispatch => {\r\n    dispatch(authActions.registerRequest());\r\n    try {\r\n        const response = await axios.post('/users/signup', credentials)\r\n       \r\n        token.set(response.data.token);\r\n        dispatch(authActions.registerSuccess(response.data))\r\n    } catch (error) {\r\n        dispatch(authActions.registerError(error.message))\r\n    }\r\n    \r\n }\r\n\r\n/*\r\n * POST @ /users/login\r\n * body:\r\n *    { email, password } \r\n *\r\n * После успешного логина добавляем токен в HTTP-заголовок\r\n */\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\n//const logIn = credentials =>  dispatch => { };\r\n\r\n\r\n/*\r\n * POST @ /users/logout\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. После успешного логаута, удаляем токен из HTTP-заголовка\r\n */\r\nconst logOut = () => async dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\n\r\n\r\n/*\r\n * GET @ /users/current\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. Забираем токен из стейта через getState()\r\n * 2. Если токена нет, выходим не выполняя никаких операций\r\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\r\n */\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n     dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n     dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\n\r\nexport default { register, logOut, logIn, getCurrentUser };","\r\n const getIsAuthenticated = state => state.auth.isAuthenticated;\r\n\r\nconst getUsername = state => state.auth.user.name;\r\n\r\nexport default {\r\n  getIsAuthenticated,\r\n  getUsername,\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {authSelectors} from '../redux/auth'\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nconst Navigation = ({isAuthenticated}) => (\r\n  <nav>\r\n    <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\r\n      Главная\r\n    </NavLink>\r\n\r\n    \r\n{isAuthenticated &&  \r\n\r\n   ( <NavLink\r\n      to=\"/contacts\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Заметки\r\n    </NavLink>)}\r\n  </nav>\r\n);\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state)\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps)(Navigation);","export default __webpack_public_path__ + \"static/media/default-avatar.e44fc4e2.png\";","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n import { authSelectors, authOperations } from '../redux/auth';\r\n import defaultAvatar from './default-avatar.png';\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    marginRight: 4,\r\n  },\r\n  name: {\r\n    fontWeight: 700,\r\n    marginRight: 12,\r\n  },\r\n};\r\n\r\nconst UserMenu = ({ avatar, name, onLogout }) => (\r\n  <div style={styles.container}>\r\n    <img src={avatar} alt=\"\" width=\"32\" style={styles.avatar} />\r\n    <span style={styles.name}>Welcome, {name}</span>\r\n    <button type=\"button\" onClick={onLogout}>\r\n      Выйти\r\n    </button>\r\n  </div>\r\n);\r\nconst mapStateToProps = state => ({\r\n  name: authSelectors.getUsername(state),\r\n   avatar: defaultAvatar,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogout: authOperations.logOut,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink\r\n      to=\"/register\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Регистрация\r\n    </NavLink>\r\n    <NavLink\r\n      to=\"/login\"\r\n      exact\r\n      style={styles.link}\r\n      activeStyle={styles.activeLink}\r\n    >\r\n      Логин\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Navigation from './Navigation';\r\nimport UserMenu from './UserMenu';\r\nimport AuthNav from './AuthNav';\r\n import { authSelectors } from '../redux/auth';\r\n\r\nconst styles = {\r\n  header: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    borderBottom: '1px solid #2A363B',\r\n  },\r\n};\r\n\r\nconst AppBar = ({ isAuthenticated }) => (\r\n  <header style={styles.header}>\r\n    <Navigation />\r\n    {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n  </header>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppBar);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n   redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to= {redirectTo} />\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);","import React, { Component, Suspense, lazy } from 'react';\nimport { connect } from 'react-redux';\n //import HomeView from './views/HomeView'\n //import RegisterView from './views/RegisterView'\n//import LoginView from './views/LoginView'\n //import TodosView from './views/TodosView'\nimport { Switch } from 'react-router-dom';\nimport AppBar from './components/AppBar';\nimport { authOperations } from './redux/auth';\nimport PrivateRoute from './components/PrivateRoute'\nimport PublicRoute from './components/PublicRoute'\n\nconst HomeView = lazy(() => import('./views/HomeView'));\nconst RegisterView = lazy(() => import('./views/RegisterView'));\nconst LoginView = lazy(() => import('./views/LoginView'));\nconst TodosView = lazy(() => import('./views/TodosView'));\n\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onGetCurretnUser();\n  }\n\n\n  render() {\n    return (\n      <div>\n        <AppBar />\n        \n        <Suspense fallback={<p>Загружаем...</p>}>\n          <Switch>\n            <PublicRoute exact path=\"/\" component={HomeView} />\n            <PublicRoute\n              path=\"/register\"\n              restricted\n              redirectTo=\"/contacts\"\n              component={RegisterView}\n            />\n            <PublicRoute\n              path=\"/login\"\n              restricted\n              redirectTo=\"/contacts\"\n              component={LoginView}\n            />\n            <PrivateRoute\n              path=\"/contacts\"\n              redirectTo=\"/login\"\n              component={TodosView}\n            />\n          </Switch>\n        </Suspense>\n      </div>\n    );\n  }\n}\n\n\nconst mapDispatchToProps = {\n  onGetCurretnUser: authOperations.getCurrentUser,\n};\n\n\nexport default connect(null, mapDispatchToProps)(App);","import { combineReducers } from \"redux\"\r\n//import types from './contacts-types'\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    changeFilter,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contacts-actions'\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\n\r\n//console.log(actions.addTodo.type)\r\n\r\nconst contacts = createReducer([], {\r\n    [fetchContactSuccess]: (_, { payload }) =>  payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload)\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n \r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload,\r\n}\r\n);\r\n\r\n// const contacts = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [...state, payload]\r\n//         case types.DELETE:\r\n//             return state.filter(({ id }) => id !== payload)\r\n//         default: return state\r\n//     }\r\n// };\r\n\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//         switch (type) {  \r\n//         case types.CHANGE_FILTER:\r\n//             return payload\r\n//               default: return state\r\n//     }\r\n//  }\r\n\r\n\r\n    //описали редьюсер\r\nexport default combineReducers({\r\n    contacts,\r\n    filter,\r\n    loading,\r\n   })","//import { combineReducers } from 'redux';\r\n\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger'\r\nimport { authReducer} from './auth';\r\nimport {\r\n     persistStore, persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage' \r\nimport contactsReduser from './contacts/contacts-reducer'\r\n\r\n\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactsReduser,\r\n// });\r\n\r\n//console.log(getDefaultMiddleware())\r\n\r\n\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    }\r\n}), logger,];\r\n\r\n// const rootReducer = combineReducers({\r\n//       contacts: persistReducer(persistConfig, contactsReduser) \r\n//     })\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer )\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// const contactspersistConfig = {\r\n//     key: 'contacts',\r\n//     storage,\r\n//     blacklist: ['filter'],\r\n// };\r\n\r\nconst authPersistConfig = {\r\n    key: 'auth',\r\n     storage,\r\n    whitelist: ['token'],\r\n}\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        auth: persistReducer(authPersistConfig, authReducer),\r\n        contacts: contactsReduser,\r\n            // persistReducer(contactspersistConfig, contactsReduser)\r\n    },\r\n    middleware,\r\n})\r\n\r\nconst persistor = persistStore(store)\r\n\r\n export default { store, persistor };\r\n//export default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\n//console.log(store)\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}