{"version":3,"sources":["../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/TodosView.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js"],"names":["randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","push","Math","floor","random","module","exports","alphabet","mask","log","length","LN2","step","id","require","RegExp","get","replace","test","dispatch","fetchContactRequest","axios","then","data","fetchContactSuccess","catch","error","fetchContactError","message","name","number","contacts","addContactRequest","post","addContactSuccess","addContactError","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getFilter","state","filter","getAllTodos","getLoading","loading","getVisibleTodos","createSelector","normalizedFilter","toLowerCase","contact","includes","ContactForm","nameInputId","shortid","generate","numberInputId","hendelChange","e","target","value","setState","hendelSubmit","preventDefault","props","map","alert","onSubmit","reset","className","this","htmlFor","type","pattern","title","required","onChange","Component","connect","contactsSelectors","contactsOperations","onDeleteTodo","onClick","contactsActions","TodosView","fetchTodos","isLoading","previousSeed","shuffled","randomFromSeed","ORIGINAL","setCharacters","_alphabet_","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","splice","shuffle","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","format","done","loopCounter","pow"],"mappings":"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","file":"static/js/4.f6da10f2.chunk.js","sourcesContent":["'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    // changeFilter,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n} from './contacts-actions'\r\n\r\n\r\n\r\nconst fetchTodos = () =>  dispatch => {\r\n    dispatch(fetchContactRequest());\r\n\r\n    // try {\r\n    //     const { data } = await axios.get('/contacts');\r\n    //     dispatch(fetchContactSuccess(data))\r\n    // } catch (error) {\r\n    //     dispatch(fetchContactError(error.message))\r\n    // }\r\n     axios\r\n        .get('/contacts')\r\n        .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n        .catch(error => dispatch(fetchContactError(error.message)));\r\n} \r\n\r\nconst addTodo = (name, number) =>  dispatch => {\r\n    const contacts = { name, number }\r\n    dispatch(addContactRequest())\r\n\r\n    // try {\r\n    //     const { data } = await axios.post('/contacts', contacts)\r\n    //     dispatch(addContactSuccess(data))\r\n    // } catch (error) {\r\n    //     dispatch(addContactError(error.message))\r\n    // }\r\n    axios\r\n        .post('/contacts', contacts)\r\n        .then(({ data }) =>\r\n            dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error.message)));\r\n};\r\n\r\n\r\nconst deleteTodo = contactId =>  dispatch => {\r\n    dispatch(deleteContactRequest())\r\n\r\n      axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error.message)));\r\n\r\n};\r\n    \r\n\r\nexport default {\r\n    fetchTodos,\r\n    addTodo,\r\n    deleteTodo,\r\n}","import {createSelector} from '@reduxjs/toolkit'\r\n\r\nconst getLoading = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getAllTodos = state => state.contacts.contacts\r\n\r\n// const getVisibleTodos = state => {\r\n//     const filter = getFilter(state)\r\n//     const contacts = getAllTodos(state)\r\n//     const normalizedFilter = filter.toLowerCase();\r\n    \r\n//     return contacts.filter(contact =>\r\n//         contact.name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n// };\r\n\r\n//предаем от чего зависит мемонизация для кеширования аргументов\r\nconst getVisibleTodos = createSelector(\r\n    [getAllTodos, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    },\r\n);\r\n\r\nexport default {\r\n    getLoading,\r\n    getFilter,\r\n    getVisibleTodos,\r\n    getAllTodos,\r\n};","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n  //ставим npm i shortid\r\nimport shortid from 'shortid';\r\nimport './ContactForm.css'\r\nimport { connect } from 'react-redux'\r\nimport contactsOperations from '../../redux/contacts/contacts-operations'\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors'\r\n\r\n  \r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '', \r\n    number: ''\r\n  };\r\n//генерим там лежит уникалый индефикатор\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n   \r\n    //общий метод для инпутов патерн для форм по внешнему виду контролируемый елемент\r\n    hendelChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    };\r\n    //сабмит формы\r\n    hendelSubmit = e => { \r\n        e.preventDefault();\r\n        if (this.props.contacts.map(({ name }) => name).includes(this.state.name)) {\r\n        alert(`${this.state.name} is already in contacts`)\r\n        return\r\n      }\r\n       this.props.onSubmit( this.state.name, this.state.number)\r\n      \r\n        this.reset();\r\n    };\r\n    //сброс формы очистить стейт\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: ''\r\n    })\r\n  };\r\n\r\n\r\n    render() {\r\n      return (\r\n        <form className='form' onSubmit={this.hendelSubmit}>\r\n          <label htmlFor={this.nameInputId}>\r\n            Name <input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              id={this.nameInputId}\r\n              onChange={this.hendelChange}\r\n            />\r\n          </label>\r\n          <label htmlFor={this.numberInputId}>\r\n            Number <input\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              name=\"number\"\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              id={this.numberInputId}\r\n              onChange={this.hendelChange}\r\n              required\r\n            />\r\n          </label>\r\n                            \r\n          <button className=\"button\" type='submit'>Add contacts</button>\r\n      \r\n        </form>\r\n            \r\n      );\r\n  };\r\n};\r\n\r\n\r\n   ContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst mapStateToProps = state => {\r\n//  return {contacts: state.contacts.contacts}\r\n   return {contacts: contactsSelectors.getAllTodos(state) }\r\n  }\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(contactsOperations.addTodo(name, number)) \r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './ContactList.css'\r\nimport { connect } from 'react-redux'\r\nimport  contactsOperations from '../../redux/contacts/contacts-operations'\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors'\r\n\r\n\r\nconst ContactList = (({ contacts, onDeleteTodo }) =>\r\n    <ul className=\"TodoList\">\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className=\"TodoList__item\">\r\n                <p className=\"TodoList__text\">{name}: {number}</p>\r\n                <button onClick={() => onDeleteTodo(id)}>Delete</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\n  \r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelectors.getVisibleTodos(state)\r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteTodo: (id) => dispatch(contactsOperations.deleteTodo(id))\r\n})\r\n\r\n\r\nContactList.propTypes = {\r\n  onDeleteTodo: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n  })),\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './Filter.css'\r\nimport { connect } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts/contacts-actions'\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors'\r\n\r\n\r\nconst Filter = ({ filter, onChange }) => (\r\n  <label className=\"label\">\r\n    Find contacts by name\r\n    <input type=\"text\" value={filter} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    // filter: state.contacts.filter\r\n   filter: contactsSelectors.getFilter(state)\r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value))\r\n})\r\n\r\n\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\r\n import ContactForm from '../components/ContactForm/ContactForm';\r\n import ContactList from '../components/ContactList/ContactList';\r\n import Filter from '../components/Filter/Filter';\r\n import { connect } from 'react-redux';\r\n import contactsOperations from '../redux/contacts/contacts-operations'\r\n import contactsSelectors from '../redux/contacts/contacts-selectors'\r\n\r\n\r\n\r\nclass TodosView  extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.fetchTodos();\r\n  }\r\n  // const App = () => (\r\n  render() {\r\n    return (\r\n      <div>\r\n   \r\n        <h1>Phonebook</h1>\r\n        {this.props.isLoading && <h1>...Loading</h1>}\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        \r\n         <Filter />\r\n     \r\n        <ContactList /> \r\n\r\n  \r\n      </div>\r\n\r\n \r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoading: contactsSelectors.getLoading(state),\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\nfetchTodos: ()=>dispatch(contactsOperations.fetchTodos())\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodosView );","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n"],"sourceRoot":""}